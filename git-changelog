#!/usr/bin/python
'''Print changelog
Requires git:

 * 1.5.7 for 'git branch --contains'

'''

prog_name = "git-changelog"
prog_version = "0.4"
prog_epilog = '''
Example:
   %(prog)s --rare
   %(prog)s --trends
'''

############################################
# Imports
############################################

import logging
import argparse
import json
import os
import sys
import signal
import time
import subprocess as sp
import re
import getpass

############################################
# Logging
############################################

try:
    # Module logging_conf should intialize root logger and, perhaps some
    # others, and assign 'log' variable to proper logger.
    from logging_conf import log
except:
    log = logging.getLogger()
    log.setLevel(logging.WARNING)
    # log.setLevel(logging.DEBUG)
    h = logging.StreamHandler()
    # f = MyFormatter()
    f = logging.Formatter()
    h.setFormatter(f)
    log.addHandler(h)

############################################
# Argument parsing
############################################

p = argparse.ArgumentParser(
    prog=prog_name,
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description=__doc__,
    epilog=prog_epilog)
p.add_argument("--debug", help="debug mode", dest='debug', action="store_true")
p.add_argument("--version",
               action='version',
               version='%(prog)s ' + prog_version)
p.add_argument("-v", help="verbose mode", dest='verbose', action="store_true")
p.add_argument("file", help="changelog file", nargs='?')

args = p.parse_args()

if args.verbose:
    log.setLevel(logging.INFO)
if args.debug:
    log.setLevel(logging.DEBUG)

log.debug("Args: %s", json.dumps(vars(args), indent=4, sort_keys=True))

############################################
# Misc
############################################


def mkdir_p(path):
    path = os.path.expanduser(path)
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == os.errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise
    return path


def signal_handler(signal, frame):
    print >> sys.stderr
    sys.exit(1)


def reg_issues():
    regs = ['#(?P<num>\d+)', 'gh-(?P<num2>\d+)']
    regs = ['(%s)' % r for r in regs]
    reg = '(?P<act>\w+\s+)?' + '(' + '|'.join(regs) + ')'
    log.debug("reg '%s'", reg)
    reg = re.compile(reg)
    return reg


reg = reg_issues()
closed = [
    'close', 'closes', 'closed', 'fix', 'fixes', 'fixed', 'resolve',
    'resolves', 'resolved'
]

############################################
# Issue Provders
############################################


class Issues(object):
    page_size = 30

    def __init__(self, name, user=None, repo=None, password=None):
        self.name = name
        self.user = user
        self.repo = repo
        self.password = password
        self.issues = {}
        self.last_ver = ''
        self.load()

    def __str__(self):
        s = self.name + ' issues: '
        s += ', '.join(sorted(self.issues.keys()))
        return s

    def load(self):

        cmd = 'git flow release'.split()
        log.debug("cmd '%s'", cmd)
        try:
            null = open('/dev/null', 'w')
            text = sp.check_output(cmd, stderr=null).splitlines()
            for line in text:
                if line.startswith('* '):
                    self.last_ver = line[2:]
                    break
        except:
            pass

        if self.password is None:
            print >> sys.stderr, "Enter password for", self.user, "@", self.name
            print >> sys.stderr, "or leave empty for unauthenticated access"
            # FIXME: should we strip password?, can 'space' be part of it?
            self.password = getpass.getpass("Password: ").strip()

        page = 1
        while True:
            if page > 5:
                break
            jsname = '%s-%02d.json' % (self.name, page)
            if args.debug and os.path.exists(jsname):
                js = open(jsname, 'r').read()
            else:
                js = self.load_page(page)
            if args.debug:
                open(jsname, 'w').write(js)
            page += 1
            if not self.parse_page(js):
                break

    def load_page(self, page):
        pass

    def changelog(self, ref, issues):
        '''
        Returns changelog composed from closed issues among `issues`
        '''

        cmd = 'git for-each-ref --sort=taggerdate --format'.split()
        cmd += ['%(committerdate:iso8601) %(taggerdate:iso8601)', ref]
        log.debug("cmd '%s'", cmd)
        date = sp.check_output(cmd).strip().split()[:2]
        date = ' '.join(date)
        ver = '/'.join(ref.split('/')[2:])
        if self.last_ver:
            ver = self.last_ver
            self.last_ver = ''
        header = "\n## Version: %s\nDate: %s\n" % (ver, date)
        header += '\n'

        chlog = ''
        links = ''
        for ino in sorted(issues.keys(), key=int, reverse=True):
            if ino not in self.issues:
                continue
            i = self.issues[ino]
            if i['state'] != 'closed' and issues[ino]['state'] != 'closed':
                continue
            if 'title' in i:
                chlog += ' * [#%s] %s\n' % (i['number'], i['title'])
                links += '[#%s]: %s\n' % (i['number'], i['url'])
            else:
                chlog += ' * [#%s]\n' % (i['number'], )
        if chlog:
            chlog += '\n'
        rc = header + chlog + links
        # strip trailing ws
        rc = [r.rstrip() for r in rc.splitlines()]
        rc = '\n'.join(rc) + '\n'
        return rc


class GithubIssues(Issues):
    def __init__(self, user, repo, password=None):
        super(GithubIssues, self).__init__('github', user, repo, password)

    def load_page(self, page):
        cmd = ['curl', '-s']
        if self.password:
            cmd += ['-u', self.user + ':' + self.password]

        url = "https://api.github.com/repos/%s/%s/issues" % \
              (self.user, self.repo)
        opts = '?state=all&per_page=%d&page=%d' % (self.page_size, page)
        cmd += [url + opts]
        log.debug("cmd '%s'", cmd)
        return sp.check_output(cmd)

    def parse_page(self, issues):
        try:
            issues = json.loads(issues)
        except Exception as e:
            print >> sys.stderr, self.name, e
            log.debug("issues %s", issues)
            return False
        if not issues:
            return False
        for i in issues:
            no = str(i['number'])
            ni = {
                'number': no,
                'title': i['title'],
                'state': i['state'],
                'url': i['html_url']
            }
            self.issues[no] = ni
        return True


class LocalRepoIssues(Issues):
    def __init__(self):
        super(LocalRepoIssues, self).__init__('local', password='')

    def load_page(self, page):
        log.debug("get issues: %s %s %s", self.name, self.user, self.repo)
        cmd = 'git log --pretty=medium -n %d --skip=%d'
        cmd = cmd % (self.page_size, self.page_size * (page - 1))
        cmd = cmd.split()
        log.debug("cmd '%s'", cmd)
        js = sp.check_output(cmd)
        return js

    def parse_page(self, issues):
        if not issues:
            return False
        for line in issues.splitlines():
            line = line.rstrip()
            if not (line and line[0].isspace()):
                continue
            self.parse_page_line(line)
        return True

    def parse_page_line(self, line):
        for m in reg.finditer(line):
            issue = m.group('num')
            if not issue:
                issue = m.group('num2')
            if not issue:
                continue
            act = m.group('act')
            if act is None:
                act = ''
            else:
                act = act.strip()
            if act in closed:
                state = "closed"
            else:
                state = "open"
            log.debug("issue %s act '%s'", issue, state)
            if issue not in self.issues:
                i = {"number": issue, "state": state}
                self.issues[issue] = i
            elif state == "closed":
                self.issues[issue]['state'] = 'closed'


class BitbucketIssues(Issues):
    def __init__(self, user, repo, password=None):
        super(BitbucketIssues, self).__init__('bitbucket', user, repo,
                                              password)

    def load_page(self, page):
        cmd = ['curl', '-s']
        if self.password:
            cmd += ['-u', self.user + ':' + self.password]
        url = "https://api.bitbucket.org/2.0/repositories/%s/%s/issues"
        url = url % (self.user, self.repo)
        opts = '?limit=%d&pagelen=%d&page=%d'
        opts = opts % (self.page_size, self.page_size, page)
        cmd += [url + opts]
        log.debug("cmd '%s'", cmd)
        text = sp.check_output(cmd)
        return text

    def parse_page(self, issues):
        if not issues.strip():
            return False
        try:
            issues = json.loads(issues)
        except Exception as e:
            print >> sys.stderr, self.name, "error", e
            return False
        if not issues:
            return False
        if not ('values' in issues and issues['values']):
            return False
        for i in issues['values']:
            no = str(i['id'])
            url = 'https://bitbucket.org/%s/%s/issues/%s/'
            url = url % (self.user, self.repo, no)
            ni = {
                'number': no,
                'title': i['title'],
                'state': i['state'],
                # 'url': i['links']['html']['href']
                'url': url
            }
            self.issues[no] = ni
        return True

############################################
# Main
############################################


def time_line():

    tl = []

    # root commit
    cmd = 'git rev-list --max-parents=0 HEAD'.split()
    log.debug("cmd '%s'", cmd)
    root = sp.check_output(cmd).strip()
    log.debug("root '%s'", root)
    tl.append(root)

    # current branch
    cmd = 'git rev-parse --symbolic-full-name HEAD'.split()
    log.debug("cmd '%s'", cmd)
    branch_ref = sp.check_output(cmd).strip()
    branch = branch_ref.split('refs/heads/')[1]
    log.debug("branch '%s'", branch)

    # tags
    cmd = 'git for-each-ref --sort=taggerdate --format'.split()
    cmd += ['%(refname) %(taggerdate:iso8601)', 'refs/tags']
    log.debug("cmd '%s'", cmd)
    tags = sp.check_output(cmd).strip().splitlines()
    ntags = []
    for tag in tags:
        # log.debug("tag '%s'", tag)
        tag = tag.split()
        log.debug("tag '%s'", tag[0])
        cmd = 'git branch --contains'.split()
        cmd += [tag[0]]
        # log.debug("cmd '%s'", cmd)
        bs = sp.check_output(cmd).strip().splitlines()
        for i, t in enumerate(bs):
            t = t.strip()
            if t.startswith('* '):
                t = t[2:]
            bs[i] = t
        log.debug("bs '%s'", bs)
        if branch in bs:
            tl.append(tag[0])
            log.debug("tag '%s' reachable from '%s'", tag[0], branch)
        else:
            log.debug("tag '%s' unreachable from '%s'", tag[0], branch)

    tl.append(branch_ref)
    log.debug("tl %s", json.dumps(tl, indent=4))
    return tl


def get_refed_issues(from_, to_):

    data = {'issues': {}}

    def start_start(line):
        # log.debug("enter")
        data['state'] = "start"

    def start_cont(line):
        # log.debug("enter")
        if line.startswith("commit "):
            commit_start(line)

    def commit_start(line):
        # log.debug("enter")
        data['state'] = "commit"
        data['commit'] = line.split()[1]
        header_start(line)

    def commit_cont(line):
        # log.debug("enter")
        pass

    def body_start(line):
        # log.debug("enter")
        data['state'] = "body"

    def body_cont(line):
        # log.debug("enter")
        if '#' in line:
            log.debug("body: '%s'", line)
        if line.startswith("commit "):
            commit_start(line)
            return
        if not line:
            return
        if not line[0].isspace():
            return
        found = False
        for m in reg.finditer(line):
            found = True
            issue = m.group('num')
            if not issue:
                issue = m.group('num2')
            if not issue:
                continue
            act = m.group('act')
            # log.debug("issue %s act '%s' line '%s'", issue, act, line)
            if act is None:
                act = ''
            else:
                act = act.strip()
            if act in closed:
                state = "closed"
            else:
                state = "open"
            log.debug("issue %s state '%s'", issue, state)
            if issue not in data['issues']:
                i = {"number": issue, "state": state}
                data['issues'][issue] = i
            elif state == "closed":
                data['issues'][issue]['state'] = 'closed'
        if '#' in line and not found:
            log.error("issue not found in '%s'", line)
        if 'gh-' in line and not found:
            log.error("issue not found in '%s'", line)

    def header_start(line):
        # log.debug("enter")
        data['state'] = "header"

    def header_cont(line):
        # log.debug("enter")
        if line == '':
            body_start(line)

    # log.info("log: %s vs %s", from_, to_)
    cmd = 'git log --pretty=medium'.split()
    cmd += [from_ + '..' + to_]
    log.debug("cmd '%s'", cmd)
    proc = sp.Popen(cmd, stdout=sp.PIPE)
    start_start('')
    while True:
        line = proc.stdout.readline()
        llen = len(line)
        line = line.rstrip()
        # log.debug("line: state %s, chars %d, '%s'", data['state'], llen, line)
        if llen == 0:
            break
        if data['state'] == "start":
            start_cont(line)
        elif data['state'] == "header":
            header_cont(line)
        elif data['state'] == "body":
            body_cont(line)
        else:
            pass

    log.debug("issues %s\n%s", to_, json.dumps(data['issues'], indent=4))
    return data['issues']


def get_all_issues():
    cmd = 'git remote -v'.split()
    log.debug("cmd '%s'", cmd)
    origins = sp.check_output(cmd).splitlines()
    for line in origins:
        origin = line.split()[1]
        if origin.endswith(".git"):
            origin = origin[:-4]
        # url https://github.com/user/repo
        if 'github.com/' in origin:
            origin = origin.split('/')
            user = origin[3]
            repo = origin[4]
            return GithubIssues(user, repo)
        # url https://user@bitbucket.org/user/repo
        if 'bitbucket.org/' in origin:
            origin = origin.split('/')
            user = origin[3]
            repo = origin[4]
            return BitbucketIssues(user, repo)
    return LocalRepoIssues()


def main():
    signal.signal(signal.SIGINT, signal_handler)

    if args.file:
        f = open(args.file, 'w')
    else:
        f = sys.stdout
    aii = get_all_issues()
    log.debug("%s", aii)
    tl = time_line()

    tl.reverse()
    chlog = []
    while len(tl) > 1:
        ii = get_refed_issues(tl[1], tl[0])
        f.write(aii.changelog(tl[0], ii))
        del tl[0]


if __name__ == '__main__':
    main()
